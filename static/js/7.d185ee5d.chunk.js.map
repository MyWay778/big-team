{"version":3,"sources":["components/MainContent/LoginContent/LoginContainer.module.css","components/MainContent/LoginContent/LoginCard/LoginCard.module.css","components/MainContent/LoginContent/LoginCard/SignInForm/SignInForm.module.css","components/MainContent/LoginContent/LoginCard/SignInForm/SignInForm.js","components/MainContent/LoginContent/LoginCard/LoginCard.js","components/MainContent/LoginContent/LoginContainer.js"],"names":["module","exports","validation","values","errors","email","test","length","password","SignInForm","props","useState","rememberMe","captcha","initialValues","setInitialValues","autoFill","evt","className","classes","container","onSubmit","a","setSubmitting","setStatus","setErrors","signInHandler","validate","enableReinitialize","touched","status","handleChange","handleSubmit","handleBlur","isSubmitting","isValidating","backendMessageCode","form","name","field","fieldError","fieldIsValidating","type","placeholder","onChange","onBlur","value","error","checkbox","captchaUrl","src","autoComplete","buttons","onClick","submit","disabled","LoginCard","loginCard","HeaderFour","text","LoginContent","this","resetBackendMessageCode","isAuth","to","loginContent","signIn","React","Component","connect","state","authReducer"],"mappings":"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","file":"static/js/7.d185ee5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContent\":\"LoginContainer_loginContent__1ThKE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginCard\":\"LoginCard_loginCard__2G54i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SignInForm_container__1ViVh\",\"form\":\"SignInForm_form__2vx00\",\"field\":\"SignInForm_field__2myGv\",\"fieldError\":\"SignInForm_fieldError__ViUyy\",\"fieldIsValidating\":\"SignInForm_fieldIsValidating__2yjoI\",\"error\":\"SignInForm_error__2U7dP\",\"submit\":\"SignInForm_submit__3ziqv btn_submit\",\"status\":\"SignInForm_status__3GErP\",\"buttons\":\"SignInForm_buttons__2T8Ar\",\"autoFill\":\"SignInForm_autoFill__2kwd5 btn_submit\",\"checkbox\":\"SignInForm_checkbox__3XA-x\"};","import React, {useEffect, useRef, useState} from 'react'\n\nimport classes from \"./SignInForm.module.css\"\nimport {Field, Formik, useFormikContext} from \"formik\";\n\nconst validation = (values) => {\n    const errors = {}\n    if (!values.email) {\n        errors.email = 'введите email'\n    } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n    ) {\n        errors.email = 'введен не корректный email'\n    } else if (values.email.length > 64) {\n        errors.email = 'недопустимая длина'\n    }\n\n    if (!values.password) {\n        errors.password = 'введите пароль'\n    } else if (values.password.length > 20) {\n        errors.password = 'максимальная длина 20 символов'\n    }\n    return errors\n}\n\n\n\nconst SignInForm = props => {\n    const [initialValues, setInitialValues] = useState({\n        email: '',\n        password: '',\n        rememberMe: false,\n        captcha: ''\n    })\n    const autoFill = (evt) => {\n        setInitialValues({\n            email: 'sakla4onakne@yandex.ru',\n            password: 'ivanov_ivan',\n            rememberMe: false,\n            captcha: ''\n        })\n    }\n    return (\n        <div className={classes.container}>\n            <Formik initialValues={initialValues}\n                    onSubmit={async (values, {setSubmitting, setStatus, setErrors}) => {\n                        props.signInHandler(values)\n                        setSubmitting(false)\n                    }}\n                    validate={validation}\n                    enableReinitialize={true}\n            >\n                {({\n                      values, errors,\n                      touched,\n                      status,\n                      handleChange,\n                      handleSubmit,\n                      handleBlur,\n                      isSubmitting,\n                      isValidating,\n                      setStatus,\n                    setErrors\n                  }) => {\n                    if (props.backendMessageCode === 1) {\n                        if (status !== \"Неверный логин и пароль\" || !errors.email) {\n                            setStatus(\"Неверный логин и пароль\")\n                            setErrors({email: true, password: true})\n                        }\n\n                    }\n                    if(props.backendMessageCode === 10 && status!== \"Введите код с картинки\") {\n                        setStatus(\"Введите код с картинки\")\n                        setErrors({})\n                    }\n                    return  <form className={classes.form} name=\"signIn\" onSubmit={handleSubmit}>\n                        {<div className={classes.status}>{status}</div>}\n                        <Field\n                            className={`\n                                ${classes.field} \n                                ${errors.email && touched.email ? classes.fieldError : ''}\n                                ${!errors.email && touched.email ? classes.fieldIsValidating : ''}\n                            `}\n                            type=\"text\"\n                            name=\"email\"\n                            placeholder=\"Email\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                        />\n                        <div className={classes.error}>{errors.email && touched.email && errors.email}</div>\n                        <Field\n                            className={`\n                                ${classes.field} \n                                ${errors.password && touched.password ? classes.fieldError : ''}\n                                ${!errors.password && touched.password ? classes.fieldIsValidating : ''}\n                            `}\n                            type=\"password\"\n                            name=\"password\"\n                            placeholder=\"Пароль\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                        />\n                        <div className={classes.error}>{errors.password && touched.password && errors.password}</div>\n                        <div className={classes.field}>\n                            <label className={classes.checkbox}><Field className={classes.checkbox} type=\"checkbox\" name=\"rememberMe\"/> Запомнить</label>\n                        </div>\n                        {props.captchaUrl && <>\n                            <img src={props.captchaUrl} />\n                            <Field\n                                className={classes.field}\n                                type=\"text\"\n                                name=\"captcha\"\n                                placeholder=\"Введите символы с картинки\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.captcha}\n                                autoComplete=\"off\"\n                            />\n                            <div className={classes.error}>{errors.captcha && touched.captcha}</div>\n                        </>}\n                        <div className={classes.buttons}>\n                            <button type=\"button\" onClick={autoFill} className={classes.autoFill}>Заполнить</button>\n                            <input className={classes.submit} type=\"submit\" value=\"Войти\" disabled={isSubmitting}/>\n                        </div>\n                    </form>\n                    }\n                }\n            </Formik>\n\n        </div>\n    )\n}\n\nexport default SignInForm","import React, {useState} from 'react'\n\nimport classes from \"./LoginCard.module.css\"\n\nimport SignInForm from \"./SignInForm/SignInForm\";\nimport HeaderFour from \"../../ContentProfile/UserCard/MainInfo/TextBlock/HeaderFour/HeaderFour\";\n\nconst LoginCard = props => {\n    return (\n        <section className={classes.loginCard}>\n            <HeaderFour text=\"Вход\" />\n            <SignInForm\n                signInHandler={props.signInHandler}\n                backendMessageCode={props.backendMessageCode}\n                captchaUrl={props.captchaUrl}\n            />\n        </section>\n    )\n}\n\nexport default LoginCard","import React from 'react'\nimport classes from \"./LoginContainer.module.css\"\nimport LoginCard from \"./LoginCard/LoginCard\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\"\nimport { resetBackendMessageCode, signIn} from \"../../../redux/authReducer\";\n\nclass LoginContent extends React.Component {\n    componentWillUnmount() {\n        this.props.resetBackendMessageCode()\n    }\n\n    render() {\n        if (this.props.isAuth) {\n            return <Redirect to=\"/profile\"/>\n        }\n        return (\n            <div className={classes.loginContent}>\n                <LoginCard signInHandler={this.props.signIn}\n                           backendMessageCode={this.props.backendMessageCode}\n                           captchaUrl={this.props.captchaUrl}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        isAuth: state.authReducer.isAuth,\n        backendMessageCode: state.authReducer.backendMessageCode,\n        captchaUrl: state.authReducer.captchaUrl\n    }\n}\n\nexport default connect(mapStateToProps, {signIn, resetBackendMessageCode})(LoginContent)"],"sourceRoot":""}